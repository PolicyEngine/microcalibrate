name: Deploy Dashboard to GitHub Pages

on:
  push:
    branches: [ main ]
    paths:
      - 'microcalibration-dashboard/**'
      - '.github/workflows/dashboard-deploy-pages.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'microcalibration-dashboard/**'

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: microcalibration-dashboard/package-lock.json

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          # Automatically inject basePath in your Next.js configuration file and disable
          # server side image optimization (so it works with static export).
          static_site_generator: next

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            microcalibration-dashboard/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('microcalibration-dashboard/**/package-lock.json', 'microcalibration-dashboard/**/yarn.lock') }}-${{ hashFiles('microcalibration-dashboard/**.[jt]s', 'microcalibration-dashboard/**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('microcalibration-dashboard/**/package-lock.json', 'microcalibration-dashboard/**/yarn.lock') }}-

      - name: Install dependencies
        run: |
          cd microcalibration-dashboard
          npm ci

      - name: Run tests/lint
        run: |
          cd microcalibration-dashboard
          npm run lint

      - name: Build with Next.js
        run: |
          cd microcalibration-dashboard
          npm run static

      - name: Copy sample CSV to build output
        run: |
          cd microcalibration-dashboard
          cp public/sample.csv out/sample.csv

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./microcalibration-dashboard/out

  # Deployment job - only on main branch
  deploy:
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Comment on commit with deployment URL
        if: github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ steps.deployment.outputs.page_url }}'
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              target_url: deploymentUrl,
              description: 'Dashboard deployed to GitHub Pages',
              context: 'deployment/github-pages'
            })

  # Preview build job for PRs - builds but doesn't deploy
  preview:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Comment PR with local testing info
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## 🚀 Dashboard Build Successful!
            
            Your calibration dashboard has been built and tested successfully! 
            
            ### 📋 Build Validation:
            - ✅ Static export generation
            - ✅ TypeScript compilation  
            - ✅ Linting checks
            - ✅ Sample data integration
            
            ### 🔍 Test the Dashboard Locally:
            
            To review and test this PR's changes interactively:
            
            \`\`\`bash
            # Clone the PR branch
            git fetch origin pull/${context.payload.pull_request.number}/head:pr-${context.payload.pull_request.number}
            git checkout pr-${context.payload.pull_request.number}
            
            # Install dependencies and start dev server
            make dashboard-install
            make dashboard-dev
            \`\`\`
            
            Then open **http://localhost:3000** in your browser to test:
            
            ### 🧪 Testing Checklist:
            - [ ] 📊 Load sample data and verify charts render
            - [ ] 📁 Test file upload (drag & drop CSV)
            - [ ] 🌐 Test URL loading with a remote CSV
            - [ ] 📱 Check responsive design on mobile
            - [ ] 📈 Verify all interactive features work
            - [ ] ⚡ Check page load performance
            
            ### 🔗 After merge to main:
            The dashboard will be deployed to: **https://${context.repo.owner}.github.io/${context.repo.repo}/**
            
            ---
            💡 **Tip**: Use \`make dashboard-check\` to run the same validation locally before pushing changes.`
            
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            })